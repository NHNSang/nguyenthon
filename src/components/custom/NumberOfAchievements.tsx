"use client";
import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { useInView } from "react-intersection-observer";
import NumberCounter from "./NumberCounter";

const archievementArr = [
  {
    title: "S·ªë nƒÉm kinh nghi·ªám",
    number: 9,
  },
  {
    title: "D·ª± √°n tri·ªÉn khai",
    number: 200,
  },
  {
    title: "C√¥ng tr√¨nh ho√†n th√†nh",
    number: 50,
  },
  {
    title: "M·ª©c ƒë·ªô h√†i l√≤ng (%)",
    number: 100,
  },
];
const stats = [
  { number: 300, label: "C√îNG TR√åNH", sublabel: "ƒê√É HO√ÄN TH√ÄNH" },
  { number: 97, label: "T·ª∂ L·ªÜ KH√ÅCH H√ÄNG", sublabel: "H√ÄI L√íNG TUY·ªÜT ƒê·ªêI" },
  { number: 80, label: "D·ª∞ √ÅN TH·ª∞C HI·ªÜN", sublabel: "TRONG & NGO√ÄI N∆Ø·ªöC" },
  { number: 40, label: "TH√ÄNH VI√äN", sublabel: "CHUY√äN NGHI·ªÜP & T·∫¨N T√ÇM" },
];
const projects = [
  {
    title: "T∆∞ v·∫•n kh√°ch h√†ng",
    content:
      "Ch√∫ng t√¥i l·∫Øng nghe y√™u c·∫ßu c·ªßa b·∫°n v√† ƒë∆∞a ra nh·ªØng t∆∞ v·∫•n chuy√™n m√¥n v·ªÅ gi·∫£i ph√°p t·ªëi ∆∞u nh·∫•t cho nhu c·∫ßu v√† kh√¥ng gian c·ªßa b·∫°n.",
  },
  {
    title: "Thi·∫øt k·∫ø ph∆∞∆°ng √°n",
    content:
      "ƒê·ªôi ng≈© thi·∫øt k·∫ø c·ªßa ch√∫ng t√¥i s·∫Ω t·∫°o ra b·∫£n v·∫Ω chi ti·∫øt, ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n.",
  },
  {
    title: "Thi c√¥ng c√¥ng tr√¨nh",
    content:
      "C√¥ng tr√¨nh ƒë∆∞·ª£c thi c√¥ng b·ªüi ƒë·ªôi ng≈© th·ª£ l√†nh ngh·ªÅ, s·ª≠ d·ª•ng v·∫≠t li·ªáu ch·∫•t l∆∞·ª£ng cao v√† quy tr√¨nh thi c√¥ng chuy√™n nghi·ªáp.",
  },
  {
    title: "Ho√†n thi·ªán & B√†n giao",
    content:
      "ƒê·ªôi ng≈© chuy√™n gia c·ªßa ch√∫ng t√¥i s·∫Ω ho√†n thi·ªán c√¥ng tr√¨nh m·ªôt c√°ch nhanh ch√≥ng v√† hi·ªáu qu·∫£, ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng.",
  },
];

const NumberOfAchievements = () => {
  const [videoOpen, setVideoOpen] = useState(false);
  const [openIndex, setOpenIndex] = useState<number | null>(null);
  const [hasAnimated, setHasAnimated] = useState(false);
  const [animatedNumbers, setAnimatedNumbers] = useState(stats.map(() => 0));

  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.3,
  });

  useEffect(() => {
    if (inView && !hasAnimated) {
      const duration = 1000; // ms
      const frameRate = 30; // fps
      const totalFrames = Math.round(duration / (1000 / frameRate));

      stats.forEach((stat, index) => {
        let frame = 0;
        const increment = stat.number / totalFrames;

        const interval = setInterval(() => {
          frame++;
          setAnimatedNumbers((prev) => {
            const newValues = [...prev];
            newValues[index] = Math.min(
              Math.round(increment * frame),
              stat.number
            );
            return newValues;
          });

          if (frame >= totalFrames) clearInterval(interval);
        }, 1000 / frameRate);
      });

      setHasAnimated(true);
    }
  }, [inView, hasAnimated, stats]);
  const toggleIndex = (index: number) => {
    setOpenIndex(openIndex === index ? null : index);
  };
  const [showVideo, setShowVideo] = useState(false);

  return (
    <>
      <div className="w-full  flex flex-col justify-center items-center bg-white">
        <motion.div
          initial={{ opacity: 0, x: -100 }}
          whileInView={{ opacity: 1, x: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, ease: "easeOut" }}
        >
          <h1 className="text-2xl md:text-[48px] mb-2 lg:mb-6 uppercase tracking-[5px] lg:tracking-[8px] font-semibold">
            T·∫°i sao ch·ªçn <span className="text-primary">ch√∫ng t√¥i</span>
          </h1>
        </motion.div>
      </div>
      <section className="w-full pt-8 bg-white" ref={ref}>
        <div className="max-w-6xl mx-auto grid grid-cols-2 md:grid-cols-4 gap-8 text-center px-4">
          {stats.map((item, index) => (
            <div
              key={index}
              className="relative flex flex-col items-center justify-center"
            >
              <div className="relative flex items-center justify-center">
                <span className="absolute text-[75px] md:text-[75px] font-bold text-stroke-gray select-none">
                  {animatedNumbers[index]}
                </span>
                <span className="text-5xl font-bold text-black z-10">
                  {animatedNumbers[index]}
                </span>
              </div>
              <div className="mt-2 uppercase text-lg md:text-xl font-semibold text-[#AC7A49]">
                {item.label}
              </div>
              <div className="text-sm text-gray-700 font-medium">
                {item.sublabel}
              </div>
            </div>
          ))}
        </div>
      </section>

      <section className="grid grid-cols-1 lg:grid-cols-2 gap-8 px-4">
        {/* LEFT: Image or Video */}
        <div className="relative w-full h-64 md:h-[400px] lg:h-[500px] max-w-4xl mx-auto my-12">
          {/* Thumbnail image */}
          <img
            src="https://aqua-pigeon-769011.hostingersite.com/wp-content/uploads/2025/07/IMG_2896.jpg" // üîÅ Thay b·∫±ng ·∫£nh th·∫≠t
            alt="Video thumbnail"
            className="w-full h-full object-cover shadow-lg object-fill"
          />

          {/* Play button */}
          <button
            onClick={() => setShowVideo(true)}
            className="absolute inset-0 flex items-center justify-center"
          >
            <div className="w-14 h-14 md:w-16 md:h-16 bg-white/80 hover:bg-white/90 rounded-full flex items-center justify-center shadow-lg transition">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-8 w-8 text-black"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M8 5v14l11-7z" />
              </svg>
            </div>
          </button>

          {/* Popup Video */}
          {showVideo && (
            <div className="fixed inset-0 z-50 flex items-center justify-center px-4">
              {/* Background overlay: m·ªù v√† blur */}
              <div
                className="absolute inset-0 bg-black/40 backdrop-blur-sm"
                onClick={() => setShowVideo(false)}
              />

              {/* Video container */}
              <div className="relative w-full max-w-3xl aspect-video z-50">
                {/* N√∫t ƒë√≥ng (tr√™n ph·∫£i c·ªßa video) */}
                <button
                  onClick={() => setShowVideo(false)}
                  className="absolute -top-2 -right-0  text-white text-3xl w-10 h-10 z-50"
                >
                  √ó
                </button>

                {/* Video element */}
                <iframe
                  src="https://www.youtube.com/embed/p2bcBTGttqQ"
                  title="YouTube video"
                  className="w-full h-full"
                  allow="autoplay; encrypted-media; fullscreen; picture-in-picture"
                  allowFullScreen
                ></iframe>
              </div>
            </div>
          )}
        </div>

        {/* RIGHT: Title + Accordion */}
        <div className="flex flex-col justify-center mr-0 lg:mr-[50px] mb-5 lg:mb-0">
          <h1 className="text-2xl md:text-[35px] mb-2 lg:mb-6 uppercase tracking-[5px] lg:tracking-[8px] font-semibold text-center lg:text-left">
            Quy tr√¨nh <span className="text-primary">l√†m vi·ªác</span>
          </h1>
          <ul className="space-y-4">
            {projects.map((proj, idx) => (
              <li key={idx} className="border-b border-gray-300 pt-4">
                <div
                  className="flex justify-between items-center cursor-pointer text-lg font-medium hover:text-primary transition-colors"
                  onClick={() => toggleIndex(idx)}
                >
                  <span className="text-[#5f5c5c] text-base px-5 lg:px-0 lg:text-lg line-clamp-2 lg:line-clamp-3 uppercase tracking-[1px] font-medium">
                    {proj.title}
                  </span>
                  <span className="text-2xl select-none">
                    {openIndex === idx ? "‚àí" : "+"}
                  </span>
                </div>
                {openIndex === idx && (
                  <div className="text-[#5f5c5c] text-base px-5 lg:px-0 lg:text-base line-clamp-2 lg:line-clamp-3 tracking-[1px] font-normal">
                    {proj.content}
                  </div>
                )}
              </li>
            ))}
          </ul>
        </div>
      </section>
    </>
  );
};

export default NumberOfAchievements;
